// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/xxx/projects/gulfstream/pkg/stream/mutator.go

// Package mockstream is a generated GoMock package.
package mockstream

import (
	context "context"
	command "github.com/go-gulfstream/gulfstream/pkg/command"
	event "github.com/go-gulfstream/gulfstream/pkg/event"
	stream "github.com/go-gulfstream/gulfstream/pkg/stream"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommandController is a mock of CommandController interface
type MockCommandController struct {
	ctrl     *gomock.Controller
	recorder *MockCommandControllerMockRecorder
}

// MockCommandControllerMockRecorder is the mock recorder for MockCommandController
type MockCommandControllerMockRecorder struct {
	mock *MockCommandController
}

// NewMockCommandController creates a new mock instance
func NewMockCommandController(ctrl *gomock.Controller) *MockCommandController {
	mock := &MockCommandController{ctrl: ctrl}
	mock.recorder = &MockCommandControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandController) EXPECT() *MockCommandControllerMockRecorder {
	return m.recorder
}

// CommandSink mocks base method
func (m *MockCommandController) CommandSink(arg0 context.Context, arg1 *stream.Stream, arg2 *command.Command) (*command.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandSink", arg0, arg1, arg2)
	ret0, _ := ret[0].(*command.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandSink indicates an expected call of CommandSink
func (mr *MockCommandControllerMockRecorder) CommandSink(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandSink", reflect.TypeOf((*MockCommandController)(nil).CommandSink), arg0, arg1, arg2)
}

// MockEventController is a mock of EventController interface
type MockEventController struct {
	ctrl     *gomock.Controller
	recorder *MockEventControllerMockRecorder
}

// MockEventControllerMockRecorder is the mock recorder for MockEventController
type MockEventControllerMockRecorder struct {
	mock *MockEventController
}

// NewMockEventController creates a new mock instance
func NewMockEventController(ctrl *gomock.Controller) *MockEventController {
	mock := &MockEventController{ctrl: ctrl}
	mock.recorder = &MockEventControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventController) EXPECT() *MockEventControllerMockRecorder {
	return m.recorder
}

// PickStream mocks base method
func (m *MockEventController) PickStream(arg0 *event.Event) stream.Picker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PickStream", arg0)
	ret0, _ := ret[0].(stream.Picker)
	return ret0
}

// PickStream indicates an expected call of PickStream
func (mr *MockEventControllerMockRecorder) PickStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickStream", reflect.TypeOf((*MockEventController)(nil).PickStream), arg0)
}

// EventSink mocks base method
func (m *MockEventController) EventSink(arg0 context.Context, arg1 *stream.Stream, arg2 *event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventSink", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventSink indicates an expected call of EventSink
func (mr *MockEventControllerMockRecorder) EventSink(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventSink", reflect.TypeOf((*MockEventController)(nil).EventSink), arg0, arg1, arg2)
}

// MockEventSinker is a mock of EventSinker interface
type MockEventSinker struct {
	ctrl     *gomock.Controller
	recorder *MockEventSinkerMockRecorder
}

// MockEventSinkerMockRecorder is the mock recorder for MockEventSinker
type MockEventSinkerMockRecorder struct {
	mock *MockEventSinker
}

// NewMockEventSinker creates a new mock instance
func NewMockEventSinker(ctrl *gomock.Controller) *MockEventSinker {
	mock := &MockEventSinker{ctrl: ctrl}
	mock.recorder = &MockEventSinkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventSinker) EXPECT() *MockEventSinkerMockRecorder {
	return m.recorder
}

// EventSink mocks base method
func (m *MockEventSinker) EventSink(ctx context.Context, e *event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventSink", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventSink indicates an expected call of EventSink
func (mr *MockEventSinkerMockRecorder) EventSink(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventSink", reflect.TypeOf((*MockEventSinker)(nil).EventSink), ctx, e)
}

// MockCommandSinker is a mock of CommandSinker interface
type MockCommandSinker struct {
	ctrl     *gomock.Controller
	recorder *MockCommandSinkerMockRecorder
}

// MockCommandSinkerMockRecorder is the mock recorder for MockCommandSinker
type MockCommandSinkerMockRecorder struct {
	mock *MockCommandSinker
}

// NewMockCommandSinker creates a new mock instance
func NewMockCommandSinker(ctrl *gomock.Controller) *MockCommandSinker {
	mock := &MockCommandSinker{ctrl: ctrl}
	mock.recorder = &MockCommandSinkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandSinker) EXPECT() *MockCommandSinkerMockRecorder {
	return m.recorder
}

// CommandSink mocks base method
func (m *MockCommandSinker) CommandSink(ctx context.Context, cmd *command.Command) (*command.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandSink", ctx, cmd)
	ret0, _ := ret[0].(*command.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandSink indicates an expected call of CommandSink
func (mr *MockCommandSinkerMockRecorder) CommandSink(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandSink", reflect.TypeOf((*MockCommandSinker)(nil).CommandSink), ctx, cmd)
}
