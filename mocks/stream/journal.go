// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/xxx/projects/gulfstream/pkg/stream/journal.go

// Package mockstream is a generated GoMock package.
package mockstream

import (
	context "context"
	event "github.com/go-gulfstream/gulfstream/pkg/event"
	stream "github.com/go-gulfstream/gulfstream/pkg/stream"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockJournal is a mock of Journal interface
type MockJournal struct {
	ctrl     *gomock.Controller
	recorder *MockJournalMockRecorder
}

// MockJournalMockRecorder is the mock recorder for MockJournal
type MockJournalMockRecorder struct {
	mock *MockJournal
}

// NewMockJournal creates a new mock instance
func NewMockJournal(ctrl *gomock.Controller) *MockJournal {
	mock := &MockJournal{ctrl: ctrl}
	mock.recorder = &MockJournalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJournal) EXPECT() *MockJournalMockRecorder {
	return m.recorder
}

// Append mocks base method
func (m *MockJournal) Append(ctx context.Context, e []*event.Event, expectedVersion int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, e, expectedVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append
func (mr *MockJournalMockRecorder) Append(ctx, e, expectedVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockJournal)(nil).Append), ctx, e, expectedVersion)
}

// Load mocks base method
func (m *MockJournal) Load(ctx context.Context, streamName string, streamID uuid.UUID) ([]*event.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, streamName, streamID)
	ret0, _ := ret[0].([]*event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockJournalMockRecorder) Load(ctx, streamName, streamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockJournal)(nil).Load), ctx, streamName, streamID)
}

// Walk mocks base method
func (m *MockJournal) Walk(ctx context.Context, streamName string, streamID uuid.UUID, fn stream.WalkFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", ctx, streamName, streamID, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockJournalMockRecorder) Walk(ctx, streamName, streamID, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockJournal)(nil).Walk), ctx, streamName, streamID, fn)
}
