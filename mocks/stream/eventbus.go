// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/xxx/projects/gulfstream/pkg/stream/eventbus.go

// Package mockstream is a generated GoMock package.
package mockstream

import (
	context "context"
	event "github.com/go-gulfstream/gulfstream/pkg/event"
	stream "github.com/go-gulfstream/gulfstream/pkg/stream"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockPublisher) Publish(ctx context.Context, event []*event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockPublisherMockRecorder) Publish(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher)(nil).Publish), ctx, event)
}

// MockSubscriber is a mock of Subscriber interface
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockSubscriber) Subscribe(ctx context.Context, streamName string, h ...stream.EventHandler) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, streamName}
	for _, a := range h {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Subscribe", varargs...)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockSubscriberMockRecorder) Subscribe(ctx, streamName interface{}, h ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, streamName}, h...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriber)(nil).Subscribe), varargs...)
}

// MockEventHandler is a mock of EventHandler interface
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// Match mocks base method
func (m *MockEventHandler) Match(eventName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", eventName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match
func (mr *MockEventHandlerMockRecorder) Match(eventName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockEventHandler)(nil).Match), eventName)
}

// Handle mocks base method
func (m *MockEventHandler) Handle(arg0 context.Context, arg1 *event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockEventHandlerMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEventHandler)(nil).Handle), arg0, arg1)
}

// Rollback mocks base method
func (m *MockEventHandler) Rollback(arg0 context.Context, arg1 *event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockEventHandlerMockRecorder) Rollback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockEventHandler)(nil).Rollback), arg0, arg1)
}

// MockEventErrorHandler is a mock of EventErrorHandler interface
type MockEventErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventErrorHandlerMockRecorder
}

// MockEventErrorHandlerMockRecorder is the mock recorder for MockEventErrorHandler
type MockEventErrorHandlerMockRecorder struct {
	mock *MockEventErrorHandler
}

// NewMockEventErrorHandler creates a new mock instance
func NewMockEventErrorHandler(ctrl *gomock.Controller) *MockEventErrorHandler {
	mock := &MockEventErrorHandler{ctrl: ctrl}
	mock.recorder = &MockEventErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventErrorHandler) EXPECT() *MockEventErrorHandlerMockRecorder {
	return m.recorder
}

// HandleError mocks base method
func (m *MockEventErrorHandler) HandleError(ctx context.Context, e *event.Event, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleError", ctx, e, err)
}

// HandleError indicates an expected call of HandleError
func (mr *MockEventErrorHandlerMockRecorder) HandleError(ctx, e, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockEventErrorHandler)(nil).HandleError), ctx, e, err)
}
