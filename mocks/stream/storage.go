// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/xxx/projects/gulfstream/pkg/stream/storage.go

// Package mockstream is a generated GoMock package.
package mockstream

import (
	context "context"
	stream "github.com/go-gulfstream/gulfstream/pkg/stream"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BlankStream mocks base method
func (m *MockStorage) BlankStream() *stream.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlankStream")
	ret0, _ := ret[0].(*stream.Stream)
	return ret0
}

// BlankStream indicates an expected call of BlankStream
func (mr *MockStorageMockRecorder) BlankStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlankStream", reflect.TypeOf((*MockStorage)(nil).BlankStream))
}

// Persist mocks base method
func (m *MockStorage) Persist(ctx context.Context, s *stream.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist
func (mr *MockStorageMockRecorder) Persist(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockStorage)(nil).Persist), ctx, s)
}

// Load mocks base method
func (m *MockStorage) Load(ctx context.Context, streamName string, streamID uuid.UUID) (*stream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, streamName, streamID)
	ret0, _ := ret[0].(*stream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockStorageMockRecorder) Load(ctx, streamName, streamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStorage)(nil).Load), ctx, streamName, streamID)
}

// MarkUnpublished mocks base method
func (m *MockStorage) MarkUnpublished(ctx context.Context, s *stream.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkUnpublished", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkUnpublished indicates an expected call of MarkUnpublished
func (mr *MockStorageMockRecorder) MarkUnpublished(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUnpublished", reflect.TypeOf((*MockStorage)(nil).MarkUnpublished), ctx, s)
}
